const axios = require('axios');

const API_BASE = 'http://localhost:3000';

async function testTenantIsolation() {
  console.log('üß™ Testando isolamento single-tenant...\n');

  try {
    // 1. Login com Jo√£o
    console.log('1. Login com Jo√£o...');
    const joaoResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'joao@exemplo.com',
      senha: '123456'
    });
    const joaoToken = joaoResponse.data.access_token;
    console.log('‚úÖ Jo√£o logado com sucesso');

    // 2. Login com Maria
    console.log('\n2. Login com Maria...');
    const mariaResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'maria@exemplo.com',
      senha: '123456'
    });
    const mariaToken = mariaResponse.data.access_token;
    console.log('‚úÖ Maria logada com sucesso');

    // 3. Testar fontes pagadoras - Jo√£o
    console.log('\n3. Testando fontes pagadoras - Jo√£o...');
    const joaoFontes = await axios.get(`${API_BASE}/fontes-pagadoras`, {
      headers: { Authorization: `Bearer ${joaoToken}` }
    });
    console.log(`‚úÖ Jo√£o tem ${joaoFontes.data.length} fontes pagadoras`);

    // 4. Testar fontes pagadoras - Maria
    console.log('\n4. Testando fontes pagadoras - Maria...');
    const mariaFontes = await axios.get(`${API_BASE}/fontes-pagadoras`, {
      headers: { Authorization: `Bearer ${mariaToken}` }
    });
    console.log(`‚úÖ Maria tem ${mariaFontes.data.length} fontes pagadoras`);

    // 5. Testar plant√µes - Jo√£o
    console.log('\n5. Testando plant√µes - Jo√£o...');
    const joaoPlantoes = await axios.get(`${API_BASE}/plantoes`, {
      headers: { Authorization: `Bearer ${joaoToken}` }
    });
    console.log(`‚úÖ Jo√£o tem ${joaoPlantoes.data.length} plant√µes`);

    // 6. Testar plant√µes - Maria
    console.log('\n6. Testando plant√µes - Maria...');
    const mariaPlantoes = await axios.get(`${API_BASE}/plantoes`, {
      headers: { Authorization: `Bearer ${mariaToken}` }
    });
    console.log(`‚úÖ Maria tem ${mariaPlantoes.data.length} plant√µes`);

    // 7. Testar pacientes - Jo√£o
    console.log('\n7. Testando pacientes - Jo√£o...');
    const joaoPacientes = await axios.get(`${API_BASE}/pacientes`, {
      headers: { Authorization: `Bearer ${joaoToken}` }
    });
    console.log(`‚úÖ Jo√£o tem ${joaoPacientes.data.pacientes.length} pacientes`);

    // 8. Testar pacientes - Maria
    console.log('\n8. Testando pacientes - Maria...');
    const mariaPacientes = await axios.get(`${API_BASE}/pacientes`, {
      headers: { Authorization: `Bearer ${mariaToken}` }
    });
    console.log(`‚úÖ Maria tem ${mariaPacientes.data.pacientes.length} pacientes`);

    // 9. Verificar isolamento
    console.log('\nüîç VERIFICA√á√ÉO DE ISOLAMENTO:');
    console.log(`Jo√£o: ${joaoFontes.data.length} fontes, ${joaoPlantoes.data.length} plant√µes, ${joaoPacientes.data.pacientes.length} pacientes`);
    console.log(`Maria: ${mariaFontes.data.length} fontes, ${mariaPlantoes.data.length} plant√µes, ${mariaPacientes.data.pacientes.length} pacientes`);

    // 10. Testar cria√ß√£o de dados
    console.log('\n9. Testando cria√ß√£o de dados...');
    
    // Jo√£o cria uma fonte pagadora
    const novaFonteJoao = await axios.post(`${API_BASE}/fontes-pagadoras`, {
      nome: 'Hospital Teste Jo√£o',
      cnpj: '12345678901234',
      ativo: true
    }, {
      headers: { Authorization: `Bearer ${joaoToken}` }
    });
    console.log('‚úÖ Jo√£o criou uma fonte pagadora');

    // Verificar se Maria n√£o v√™ a fonte de Jo√£o
    const mariaFontesApos = await axios.get(`${API_BASE}/fontes-pagadoras`, {
      headers: { Authorization: `Bearer ${mariaToken}` }
    });
    console.log(`‚úÖ Maria ainda tem ${mariaFontesApos.data.length} fontes (isolamento mantido)`);

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('‚úÖ O isolamento single-tenant est√° funcionando corretamente!');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.response?.data || error.message);
    console.error('Status:', error.response?.status);
  }
}

testTenantIsolation();
